// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IUserApp is an autogenerated mock type for the IUserApp type
type IUserApp struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, email
func (_m *IUserApp) Create(ctx context.Context, email string) (uint, error) {
	ret := _m.Called(ctx, email)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email
func (_m *IUserApp) Login(ctx context.Context, email string) (string, time.Time, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, time.Time, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIUserApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserApp creates a new instance of IUserApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserApp(t mockConstructorTestingTNewIUserApp) *IUserApp {
	mock := &IUserApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
