// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "api-your-accounts/user/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	transaction "api-your-accounts/shared/domain/transaction"
)

// UserTokenRepository is an autogenerated mock type for the UserTokenRepository type
type UserTokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userToken
func (_m *UserTokenRepository) Create(ctx context.Context, userToken *domain.UserToken) (*domain.UserToken, error) {
	ret := _m.Called(ctx, userToken)

	var r0 *domain.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserToken) (*domain.UserToken, error)); ok {
		return rf(ctx, userToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserToken) *domain.UserToken); ok {
		r0 = rf(ctx, userToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserToken) error); ok {
		r1 = rf(ctx, userToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTokenAndUserId provides a mock function with given fields: ctx, token, userId
func (_m *UserTokenRepository) FindByTokenAndUserId(ctx context.Context, token string, userId uint) (*domain.UserToken, error) {
	ret := _m.Called(ctx, token, userId)

	var r0 *domain.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) (*domain.UserToken, error)); ok {
		return rf(ctx, token, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) *domain.UserToken); ok {
		r0 = rf(ctx, token, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, token, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, userToken
func (_m *UserTokenRepository) Update(ctx context.Context, userToken *domain.UserToken) (*domain.UserToken, error) {
	ret := _m.Called(ctx, userToken)

	var r0 *domain.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserToken) (*domain.UserToken, error)); ok {
		return rf(ctx, userToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserToken) *domain.UserToken); ok {
		r0 = rf(ctx, userToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserToken) error); ok {
		r1 = rf(ctx, userToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *UserTokenRepository) WithTransaction(tx transaction.Transaction) domain.UserTokenRepository {
	ret := _m.Called(tx)

	var r0 domain.UserTokenRepository
	if rf, ok := ret.Get(0).(func(transaction.Transaction) domain.UserTokenRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UserTokenRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserTokenRepository creates a new instance of UserTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserTokenRepository(t mockConstructorTestingTNewUserTokenRepository) *UserTokenRepository {
	mock := &UserTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
