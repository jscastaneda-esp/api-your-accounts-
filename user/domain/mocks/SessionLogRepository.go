// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "api-your-accounts/user/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SessionLogRepository is an autogenerated mock type for the SessionLogRepository type
type SessionLogRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, session
func (_m *SessionLogRepository) Create(ctx context.Context, session *domain.SessionLog) (*domain.SessionLog, error) {
	ret := _m.Called(ctx, session)

	var r0 *domain.SessionLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SessionLog) (*domain.SessionLog, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SessionLog) *domain.SessionLog); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SessionLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.SessionLog) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, session
func (_m *SessionLogRepository) Update(ctx context.Context, session *domain.SessionLog) (*domain.SessionLog, error) {
	ret := _m.Called(ctx, session)

	var r0 *domain.SessionLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SessionLog) (*domain.SessionLog, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SessionLog) *domain.SessionLog); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SessionLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.SessionLog) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSessionLogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionLogRepository creates a new instance of SessionLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionLogRepository(t mockConstructorTestingTNewSessionLogRepository) *SessionLogRepository {
	mock := &SessionLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
