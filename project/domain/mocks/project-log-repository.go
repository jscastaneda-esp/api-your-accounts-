// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "your-accounts-api/project/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// ProjectLogRepository is an autogenerated mock type for the ProjectLogRepository type
type ProjectLogRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, t
func (_m *ProjectLogRepository) Create(ctx context.Context, t domain.ProjectLog) (*domain.ProjectLog, error) {
	ret := _m.Called(ctx, t)

	var r0 *domain.ProjectLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectLog) (*domain.ProjectLog, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProjectLog) *domain.ProjectLog); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProjectLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProjectLog) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProjectId provides a mock function with given fields: ctx, projectId
func (_m *ProjectLogRepository) FindByProjectId(ctx context.Context, projectId uint) ([]*domain.ProjectLog, error) {
	ret := _m.Called(ctx, projectId)

	var r0 []*domain.ProjectLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*domain.ProjectLog, error)); ok {
		return rf(ctx, projectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*domain.ProjectLog); ok {
		r0 = rf(ctx, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ProjectLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *ProjectLogRepository) WithTransaction(tx persistent.Transaction) domain.ProjectLogRepository {
	ret := _m.Called(tx)

	var r0 domain.ProjectLogRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.ProjectLogRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ProjectLogRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewProjectLogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectLogRepository creates a new instance of ProjectLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectLogRepository(t mockConstructorTestingTNewProjectLogRepository) *ProjectLogRepository {
	mock := &ProjectLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
