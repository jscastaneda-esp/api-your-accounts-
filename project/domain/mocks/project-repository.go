// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "api-your-accounts/project/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	persistent "api-your-accounts/shared/domain/persistent"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, t
func (_m *ProjectRepository) Create(ctx context.Context, t domain.Project) (*domain.Project, error) {
	ret := _m.Called(ctx, t)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) (*domain.Project, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Project) *domain.Project); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Project) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, id
func (_m *ProjectRepository) FindById(ctx context.Context, id uint) (*domain.Project, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domain.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.Project); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *ProjectRepository) FindByUserId(ctx context.Context, userId uint) ([]*domain.Project, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*domain.Project, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*domain.Project); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *ProjectRepository) WithTransaction(tx persistent.Transaction) domain.ProjectRepository {
	ret := _m.Called(tx)

	var r0 domain.ProjectRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.ProjectRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ProjectRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewProjectRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectRepository(t mockConstructorTestingTNewProjectRepository) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
