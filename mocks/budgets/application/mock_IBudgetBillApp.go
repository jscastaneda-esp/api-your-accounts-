// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_application

import (
	context "context"
	domain "your-accounts-api/budgets/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockIBudgetBillApp is an autogenerated mock type for the IBudgetBillApp type
type MockIBudgetBillApp struct {
	mock.Mock
}

type MockIBudgetBillApp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIBudgetBillApp) EXPECT() *MockIBudgetBillApp_Expecter {
	return &MockIBudgetBillApp_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, description, category, budgetId
func (_m *MockIBudgetBillApp) Create(ctx context.Context, description string, category domain.BudgetBillCategory, budgetId uint) (uint, error) {
	ret := _m.Called(ctx, description, category, budgetId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.BudgetBillCategory, uint) (uint, error)); ok {
		return rf(ctx, description, category, budgetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.BudgetBillCategory, uint) uint); ok {
		r0 = rf(ctx, description, category, budgetId)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.BudgetBillCategory, uint) error); ok {
		r1 = rf(ctx, description, category, budgetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIBudgetBillApp_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIBudgetBillApp_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - description string
//   - category domain.BudgetBillCategory
//   - budgetId uint
func (_e *MockIBudgetBillApp_Expecter) Create(ctx interface{}, description interface{}, category interface{}, budgetId interface{}) *MockIBudgetBillApp_Create_Call {
	return &MockIBudgetBillApp_Create_Call{Call: _e.mock.On("Create", ctx, description, category, budgetId)}
}

func (_c *MockIBudgetBillApp_Create_Call) Run(run func(ctx context.Context, description string, category domain.BudgetBillCategory, budgetId uint)) *MockIBudgetBillApp_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.BudgetBillCategory), args[3].(uint))
	})
	return _c
}

func (_c *MockIBudgetBillApp_Create_Call) Return(_a0 uint, _a1 error) *MockIBudgetBillApp_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIBudgetBillApp_Create_Call) RunAndReturn(run func(context.Context, string, domain.BudgetBillCategory, uint) (uint, error)) *MockIBudgetBillApp_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, description, amount, billId
func (_m *MockIBudgetBillApp) CreateTransaction(ctx context.Context, description string, amount float64, billId uint) error {
	ret := _m.Called(ctx, description, amount, billId)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, uint) error); ok {
		r0 = rf(ctx, description, amount, billId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIBudgetBillApp_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockIBudgetBillApp_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - description string
//   - amount float64
//   - billId uint
func (_e *MockIBudgetBillApp_Expecter) CreateTransaction(ctx interface{}, description interface{}, amount interface{}, billId interface{}) *MockIBudgetBillApp_CreateTransaction_Call {
	return &MockIBudgetBillApp_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, description, amount, billId)}
}

func (_c *MockIBudgetBillApp_CreateTransaction_Call) Run(run func(ctx context.Context, description string, amount float64, billId uint)) *MockIBudgetBillApp_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(uint))
	})
	return _c
}

func (_c *MockIBudgetBillApp_CreateTransaction_Call) Return(_a0 error) *MockIBudgetBillApp_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIBudgetBillApp_CreateTransaction_Call) RunAndReturn(run func(context.Context, string, float64, uint) error) *MockIBudgetBillApp_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIBudgetBillApp creates a new instance of MockIBudgetBillApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIBudgetBillApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIBudgetBillApp {
	mock := &MockIBudgetBillApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
