// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_domain

import (
	context "context"
	domain "your-accounts-api/budgets/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// MockBudgetBillRepository is an autogenerated mock type for the BudgetBillRepository type
type MockBudgetBillRepository struct {
	mock.Mock
}

type MockBudgetBillRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBudgetBillRepository) EXPECT() *MockBudgetBillRepository_Expecter {
	return &MockBudgetBillRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockBudgetBillRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetBillRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBudgetBillRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockBudgetBillRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockBudgetBillRepository_Delete_Call {
	return &MockBudgetBillRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBudgetBillRepository_Delete_Call) Run(run func(ctx context.Context, id uint)) *MockBudgetBillRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockBudgetBillRepository_Delete_Call) Return(_a0 error) *MockBudgetBillRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetBillRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *MockBudgetBillRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockBudgetBillRepository) Save(ctx context.Context, _a1 domain.BudgetBill) (uint, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BudgetBill) (uint, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BudgetBill) uint); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BudgetBill) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetBillRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBudgetBillRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 domain.BudgetBill
func (_e *MockBudgetBillRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *MockBudgetBillRepository_Save_Call {
	return &MockBudgetBillRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockBudgetBillRepository_Save_Call) Run(run func(ctx context.Context, _a1 domain.BudgetBill)) *MockBudgetBillRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.BudgetBill))
	})
	return _c
}

func (_c *MockBudgetBillRepository_Save_Call) Return(_a0 uint, _a1 error) *MockBudgetBillRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetBillRepository_Save_Call) RunAndReturn(run func(context.Context, domain.BudgetBill) (uint, error)) *MockBudgetBillRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAll provides a mock function with given fields: ctx, domains
func (_m *MockBudgetBillRepository) SaveAll(ctx context.Context, domains []domain.BudgetBill) error {
	ret := _m.Called(ctx, domains)

	if len(ret) == 0 {
		panic("no return value specified for SaveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.BudgetBill) error); ok {
		r0 = rf(ctx, domains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBudgetBillRepository_SaveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAll'
type MockBudgetBillRepository_SaveAll_Call struct {
	*mock.Call
}

// SaveAll is a helper method to define mock.On call
//   - ctx context.Context
//   - domains []domain.BudgetBill
func (_e *MockBudgetBillRepository_Expecter) SaveAll(ctx interface{}, domains interface{}) *MockBudgetBillRepository_SaveAll_Call {
	return &MockBudgetBillRepository_SaveAll_Call{Call: _e.mock.On("SaveAll", ctx, domains)}
}

func (_c *MockBudgetBillRepository_SaveAll_Call) Run(run func(ctx context.Context, domains []domain.BudgetBill)) *MockBudgetBillRepository_SaveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.BudgetBill))
	})
	return _c
}

func (_c *MockBudgetBillRepository_SaveAll_Call) Return(_a0 error) *MockBudgetBillRepository_SaveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetBillRepository_SaveAll_Call) RunAndReturn(run func(context.Context, []domain.BudgetBill) error) *MockBudgetBillRepository_SaveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, id
func (_m *MockBudgetBillRepository) Search(ctx context.Context, id uint) (domain.BudgetBill, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 domain.BudgetBill
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (domain.BudgetBill, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) domain.BudgetBill); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.BudgetBill)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetBillRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockBudgetBillRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockBudgetBillRepository_Expecter) Search(ctx interface{}, id interface{}) *MockBudgetBillRepository_Search_Call {
	return &MockBudgetBillRepository_Search_Call{Call: _e.mock.On("Search", ctx, id)}
}

func (_c *MockBudgetBillRepository_Search_Call) Run(run func(ctx context.Context, id uint)) *MockBudgetBillRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockBudgetBillRepository_Search_Call) Return(_a0 domain.BudgetBill, _a1 error) *MockBudgetBillRepository_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetBillRepository_Search_Call) RunAndReturn(run func(context.Context, uint) (domain.BudgetBill, error)) *MockBudgetBillRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: tx
func (_m *MockBudgetBillRepository) WithTransaction(tx persistent.Transaction) domain.BudgetBillRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 domain.BudgetBillRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.BudgetBillRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BudgetBillRepository)
		}
	}

	return r0
}

// MockBudgetBillRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockBudgetBillRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - tx persistent.Transaction
func (_e *MockBudgetBillRepository_Expecter) WithTransaction(tx interface{}) *MockBudgetBillRepository_WithTransaction_Call {
	return &MockBudgetBillRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", tx)}
}

func (_c *MockBudgetBillRepository_WithTransaction_Call) Run(run func(tx persistent.Transaction)) *MockBudgetBillRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(persistent.Transaction))
	})
	return _c
}

func (_c *MockBudgetBillRepository_WithTransaction_Call) Return(_a0 domain.BudgetBillRepository) *MockBudgetBillRepository_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBudgetBillRepository_WithTransaction_Call) RunAndReturn(run func(persistent.Transaction) domain.BudgetBillRepository) *MockBudgetBillRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBudgetBillRepository creates a new instance of MockBudgetBillRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBudgetBillRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBudgetBillRepository {
	mock := &MockBudgetBillRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
