// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_domain

import (
	context "context"
	domain "your-accounts-api/users/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// MockUserTokenRepository is an autogenerated mock type for the UserTokenRepository type
type MockUserTokenRepository struct {
	mock.Mock
}

type MockUserTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserTokenRepository) EXPECT() *MockUserTokenRepository_Expecter {
	return &MockUserTokenRepository_Expecter{mock: &_m.Mock}
}

// DeleteByExpiresAtGreaterThanNow provides a mock function with given fields: ctx
func (_m *MockUserTokenRepository) DeleteByExpiresAtGreaterThanNow(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByExpiresAtGreaterThanNow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByExpiresAtGreaterThanNow'
type MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call struct {
	*mock.Call
}

// DeleteByExpiresAtGreaterThanNow is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserTokenRepository_Expecter) DeleteByExpiresAtGreaterThanNow(ctx interface{}) *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call {
	return &MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call{Call: _e.mock.On("DeleteByExpiresAtGreaterThanNow", ctx)}
}

func (_c *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call) Run(run func(ctx context.Context)) *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call) Return(_a0 error) *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call) RunAndReturn(run func(context.Context) error) *MockUserTokenRepository_DeleteByExpiresAtGreaterThanNow_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockUserTokenRepository) Save(ctx context.Context, _a1 domain.UserToken) (uint, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserToken) (uint, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserToken) uint); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserToken) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserTokenRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserTokenRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 domain.UserToken
func (_e *MockUserTokenRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *MockUserTokenRepository_Save_Call {
	return &MockUserTokenRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockUserTokenRepository_Save_Call) Run(run func(ctx context.Context, _a1 domain.UserToken)) *MockUserTokenRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserToken))
	})
	return _c
}

func (_c *MockUserTokenRepository_Save_Call) Return(_a0 uint, _a1 error) *MockUserTokenRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserTokenRepository_Save_Call) RunAndReturn(run func(context.Context, domain.UserToken) (uint, error)) *MockUserTokenRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByExample provides a mock function with given fields: ctx, example
func (_m *MockUserTokenRepository) SearchByExample(ctx context.Context, example domain.UserToken) (domain.UserToken, error) {
	ret := _m.Called(ctx, example)

	if len(ret) == 0 {
		panic("no return value specified for SearchByExample")
	}

	var r0 domain.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserToken) (domain.UserToken, error)); ok {
		return rf(ctx, example)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserToken) domain.UserToken); ok {
		r0 = rf(ctx, example)
	} else {
		r0 = ret.Get(0).(domain.UserToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserToken) error); ok {
		r1 = rf(ctx, example)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserTokenRepository_SearchByExample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByExample'
type MockUserTokenRepository_SearchByExample_Call struct {
	*mock.Call
}

// SearchByExample is a helper method to define mock.On call
//   - ctx context.Context
//   - example domain.UserToken
func (_e *MockUserTokenRepository_Expecter) SearchByExample(ctx interface{}, example interface{}) *MockUserTokenRepository_SearchByExample_Call {
	return &MockUserTokenRepository_SearchByExample_Call{Call: _e.mock.On("SearchByExample", ctx, example)}
}

func (_c *MockUserTokenRepository_SearchByExample_Call) Run(run func(ctx context.Context, example domain.UserToken)) *MockUserTokenRepository_SearchByExample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserToken))
	})
	return _c
}

func (_c *MockUserTokenRepository_SearchByExample_Call) Return(_a0 domain.UserToken, _a1 error) *MockUserTokenRepository_SearchByExample_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserTokenRepository_SearchByExample_Call) RunAndReturn(run func(context.Context, domain.UserToken) (domain.UserToken, error)) *MockUserTokenRepository_SearchByExample_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: tx
func (_m *MockUserTokenRepository) WithTransaction(tx persistent.Transaction) domain.UserTokenRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 domain.UserTokenRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.UserTokenRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UserTokenRepository)
		}
	}

	return r0
}

// MockUserTokenRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockUserTokenRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - tx persistent.Transaction
func (_e *MockUserTokenRepository_Expecter) WithTransaction(tx interface{}) *MockUserTokenRepository_WithTransaction_Call {
	return &MockUserTokenRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", tx)}
}

func (_c *MockUserTokenRepository_WithTransaction_Call) Run(run func(tx persistent.Transaction)) *MockUserTokenRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(persistent.Transaction))
	})
	return _c
}

func (_c *MockUserTokenRepository_WithTransaction_Call) Return(_a0 domain.UserTokenRepository) *MockUserTokenRepository_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserTokenRepository_WithTransaction_Call) RunAndReturn(run func(persistent.Transaction) domain.UserTokenRepository) *MockUserTokenRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserTokenRepository creates a new instance of MockUserTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserTokenRepository {
	mock := &MockUserTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
