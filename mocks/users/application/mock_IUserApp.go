// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_application

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserApp is an autogenerated mock type for the IUserApp type
type MockIUserApp struct {
	mock.Mock
}

type MockIUserApp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserApp) EXPECT() *MockIUserApp_Expecter {
	return &MockIUserApp_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, email
func (_m *MockIUserApp) Create(ctx context.Context, email string) (uint, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserApp_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserApp_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIUserApp_Expecter) Create(ctx interface{}, email interface{}) *MockIUserApp_Create_Call {
	return &MockIUserApp_Create_Call{Call: _e.mock.On("Create", ctx, email)}
}

func (_c *MockIUserApp_Create_Call) Run(run func(ctx context.Context, email string)) *MockIUserApp_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserApp_Create_Call) Return(_a0 uint, _a1 error) *MockIUserApp_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserApp_Create_Call) RunAndReturn(run func(context.Context, string) (uint, error)) *MockIUserApp_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function with given fields: ctx
func (_m *MockIUserApp) DeleteExpired(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserApp_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockIUserApp_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIUserApp_Expecter) DeleteExpired(ctx interface{}) *MockIUserApp_DeleteExpired_Call {
	return &MockIUserApp_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockIUserApp_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockIUserApp_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIUserApp_DeleteExpired_Call) Return(_a0 error) *MockIUserApp_DeleteExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserApp_DeleteExpired_Call) RunAndReturn(run func(context.Context) error) *MockIUserApp_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email
func (_m *MockIUserApp) Login(ctx context.Context, email string) (string, time.Time, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, time.Time, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIUserApp_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIUserApp_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIUserApp_Expecter) Login(ctx interface{}, email interface{}) *MockIUserApp_Login_Call {
	return &MockIUserApp_Login_Call{Call: _e.mock.On("Login", ctx, email)}
}

func (_c *MockIUserApp_Login_Call) Run(run func(ctx context.Context, email string)) *MockIUserApp_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserApp_Login_Call) Return(_a0 string, _a1 time.Time, _a2 error) *MockIUserApp_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIUserApp_Login_Call) RunAndReturn(run func(context.Context, string) (string, time.Time, error)) *MockIUserApp_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserApp creates a new instance of MockIUserApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserApp {
	mock := &MockIUserApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
