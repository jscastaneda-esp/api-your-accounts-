// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_persistent

import (
	persistent "your-accounts-api/shared/domain/persistent"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionManager is an autogenerated mock type for the TransactionManager type
type MockTransactionManager struct {
	mock.Mock
}

type MockTransactionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionManager) EXPECT() *MockTransactionManager_Expecter {
	return &MockTransactionManager_Expecter{mock: &_m.Mock}
}

// Transaction provides a mock function with given fields: fc
func (_m *MockTransactionManager) Transaction(fc func(persistent.Transaction) error) error {
	ret := _m.Called(fc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(persistent.Transaction) error) error); ok {
		r0 = rf(fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionManager_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockTransactionManager_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fc func(persistent.Transaction) error
func (_e *MockTransactionManager_Expecter) Transaction(fc interface{}) *MockTransactionManager_Transaction_Call {
	return &MockTransactionManager_Transaction_Call{Call: _e.mock.On("Transaction", fc)}
}

func (_c *MockTransactionManager_Transaction_Call) Run(run func(fc func(persistent.Transaction) error)) *MockTransactionManager_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(persistent.Transaction) error))
	})
	return _c
}

func (_c *MockTransactionManager_Transaction_Call) Return(_a0 error) *MockTransactionManager_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionManager_Transaction_Call) RunAndReturn(run func(func(persistent.Transaction) error) error) *MockTransactionManager_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionManager creates a new instance of MockTransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionManager {
	mock := &MockTransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
