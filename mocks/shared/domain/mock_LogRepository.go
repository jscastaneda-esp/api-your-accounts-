// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks_domain

import (
	context "context"
	domain "your-accounts-api/shared/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// MockLogRepository is an autogenerated mock type for the LogRepository type
type MockLogRepository struct {
	mock.Mock
}

type MockLogRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogRepository) EXPECT() *MockLogRepository_Expecter {
	return &MockLogRepository_Expecter{mock: &_m.Mock}
}

// DeleteByResourceIdAndIdLessThanLimit provides a mock function with given fields: ctx, resourceId
func (_m *MockLogRepository) DeleteByResourceIdAndIdLessThanLimit(ctx context.Context, resourceId uint) error {
	ret := _m.Called(ctx, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByResourceIdAndIdLessThanLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, resourceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByResourceIdAndIdLessThanLimit'
type MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call struct {
	*mock.Call
}

// DeleteByResourceIdAndIdLessThanLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceId uint
func (_e *MockLogRepository_Expecter) DeleteByResourceIdAndIdLessThanLimit(ctx interface{}, resourceId interface{}) *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call {
	return &MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call{Call: _e.mock.On("DeleteByResourceIdAndIdLessThanLimit", ctx, resourceId)}
}

func (_c *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call) Run(run func(ctx context.Context, resourceId uint)) *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call) Return(_a0 error) *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call) RunAndReturn(run func(context.Context, uint) error) *MockLogRepository_DeleteByResourceIdAndIdLessThanLimit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByResourceIdNotExists provides a mock function with given fields: ctx
func (_m *MockLogRepository) DeleteByResourceIdNotExists(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByResourceIdNotExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogRepository_DeleteByResourceIdNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByResourceIdNotExists'
type MockLogRepository_DeleteByResourceIdNotExists_Call struct {
	*mock.Call
}

// DeleteByResourceIdNotExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLogRepository_Expecter) DeleteByResourceIdNotExists(ctx interface{}) *MockLogRepository_DeleteByResourceIdNotExists_Call {
	return &MockLogRepository_DeleteByResourceIdNotExists_Call{Call: _e.mock.On("DeleteByResourceIdNotExists", ctx)}
}

func (_c *MockLogRepository_DeleteByResourceIdNotExists_Call) Run(run func(ctx context.Context)) *MockLogRepository_DeleteByResourceIdNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLogRepository_DeleteByResourceIdNotExists_Call) Return(_a0 error) *MockLogRepository_DeleteByResourceIdNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogRepository_DeleteByResourceIdNotExists_Call) RunAndReturn(run func(context.Context) error) *MockLogRepository_DeleteByResourceIdNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockLogRepository) Save(ctx context.Context, _a1 domain.Log) (uint, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) (uint, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) uint); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Log) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockLogRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 domain.Log
func (_e *MockLogRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *MockLogRepository_Save_Call {
	return &MockLogRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockLogRepository_Save_Call) Run(run func(ctx context.Context, _a1 domain.Log)) *MockLogRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Log))
	})
	return _c
}

func (_c *MockLogRepository_Save_Call) Return(_a0 uint, _a1 error) *MockLogRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogRepository_Save_Call) RunAndReturn(run func(context.Context, domain.Log) (uint, error)) *MockLogRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SearchAllByExample provides a mock function with given fields: ctx, example
func (_m *MockLogRepository) SearchAllByExample(ctx context.Context, example domain.Log) ([]domain.Log, error) {
	ret := _m.Called(ctx, example)

	if len(ret) == 0 {
		panic("no return value specified for SearchAllByExample")
	}

	var r0 []domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) ([]domain.Log, error)); ok {
		return rf(ctx, example)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) []domain.Log); ok {
		r0 = rf(ctx, example)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Log) error); ok {
		r1 = rf(ctx, example)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogRepository_SearchAllByExample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchAllByExample'
type MockLogRepository_SearchAllByExample_Call struct {
	*mock.Call
}

// SearchAllByExample is a helper method to define mock.On call
//   - ctx context.Context
//   - example domain.Log
func (_e *MockLogRepository_Expecter) SearchAllByExample(ctx interface{}, example interface{}) *MockLogRepository_SearchAllByExample_Call {
	return &MockLogRepository_SearchAllByExample_Call{Call: _e.mock.On("SearchAllByExample", ctx, example)}
}

func (_c *MockLogRepository_SearchAllByExample_Call) Run(run func(ctx context.Context, example domain.Log)) *MockLogRepository_SearchAllByExample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Log))
	})
	return _c
}

func (_c *MockLogRepository_SearchAllByExample_Call) Return(_a0 []domain.Log, _a1 error) *MockLogRepository_SearchAllByExample_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogRepository_SearchAllByExample_Call) RunAndReturn(run func(context.Context, domain.Log) ([]domain.Log, error)) *MockLogRepository_SearchAllByExample_Call {
	_c.Call.Return(run)
	return _c
}

// SearchResourceIdsWithLimitExceeded provides a mock function with given fields: ctx
func (_m *MockLogRepository) SearchResourceIdsWithLimitExceeded(ctx context.Context) ([]uint, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SearchResourceIdsWithLimitExceeded")
	}

	var r0 []uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]uint, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []uint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogRepository_SearchResourceIdsWithLimitExceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchResourceIdsWithLimitExceeded'
type MockLogRepository_SearchResourceIdsWithLimitExceeded_Call struct {
	*mock.Call
}

// SearchResourceIdsWithLimitExceeded is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLogRepository_Expecter) SearchResourceIdsWithLimitExceeded(ctx interface{}) *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call {
	return &MockLogRepository_SearchResourceIdsWithLimitExceeded_Call{Call: _e.mock.On("SearchResourceIdsWithLimitExceeded", ctx)}
}

func (_c *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call) Run(run func(ctx context.Context)) *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call) Return(_a0 []uint, _a1 error) *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call) RunAndReturn(run func(context.Context) ([]uint, error)) *MockLogRepository_SearchResourceIdsWithLimitExceeded_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: tx
func (_m *MockLogRepository) WithTransaction(tx persistent.Transaction) domain.LogRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 domain.LogRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.LogRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.LogRepository)
		}
	}

	return r0
}

// MockLogRepository_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockLogRepository_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - tx persistent.Transaction
func (_e *MockLogRepository_Expecter) WithTransaction(tx interface{}) *MockLogRepository_WithTransaction_Call {
	return &MockLogRepository_WithTransaction_Call{Call: _e.mock.On("WithTransaction", tx)}
}

func (_c *MockLogRepository_WithTransaction_Call) Run(run func(tx persistent.Transaction)) *MockLogRepository_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(persistent.Transaction))
	})
	return _c
}

func (_c *MockLogRepository_WithTransaction_Call) Return(_a0 domain.LogRepository) *MockLogRepository_WithTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogRepository_WithTransaction_Call) RunAndReturn(run func(persistent.Transaction) domain.LogRepository) *MockLogRepository_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogRepository creates a new instance of MockLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogRepository {
	mock := &MockLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
