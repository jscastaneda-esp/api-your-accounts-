// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "your-accounts-api/budgets/domain"

	mock "github.com/stretchr/testify/mock"
)

// IBudgetBillApp is an autogenerated mock type for the IBudgetBillApp type
type IBudgetBillApp struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, description, category, budgetId
func (_m *IBudgetBillApp) Create(ctx context.Context, description string, category domain.BudgetBillCategory, budgetId uint) (uint, error) {
	ret := _m.Called(ctx, description, category, budgetId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.BudgetBillCategory, uint) (uint, error)); ok {
		return rf(ctx, description, category, budgetId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.BudgetBillCategory, uint) uint); ok {
		r0 = rf(ctx, description, category, budgetId)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.BudgetBillCategory, uint) error); ok {
		r1 = rf(ctx, description, category, budgetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: ctx, description, amount, billId
func (_m *IBudgetBillApp) CreateTransaction(ctx context.Context, description string, amount float64, billId uint) error {
	ret := _m.Called(ctx, description, amount, billId)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, uint) error); ok {
		r0 = rf(ctx, description, amount, billId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBudgetBillApp creates a new instance of IBudgetBillApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBudgetBillApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBudgetBillApp {
	mock := &IBudgetBillApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
