// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "your-accounts-api/budgets/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// BudgetAvailableRepository is an autogenerated mock type for the BudgetAvailableRepository type
type BudgetAvailableRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BudgetAvailableRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *BudgetAvailableRepository) Save(ctx context.Context, _a1 domain.BudgetAvailable) (uint, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BudgetAvailable) (uint, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BudgetAvailable) uint); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BudgetAvailable) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAll provides a mock function with given fields: ctx, domains
func (_m *BudgetAvailableRepository) SaveAll(ctx context.Context, domains []domain.BudgetAvailable) error {
	ret := _m.Called(ctx, domains)

	if len(ret) == 0 {
		panic("no return value specified for SaveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.BudgetAvailable) error); ok {
		r0 = rf(ctx, domains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: tx
func (_m *BudgetAvailableRepository) WithTransaction(tx persistent.Transaction) domain.BudgetAvailableRepository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 domain.BudgetAvailableRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.BudgetAvailableRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BudgetAvailableRepository)
		}
	}

	return r0
}

// NewBudgetAvailableRepository creates a new instance of BudgetAvailableRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBudgetAvailableRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BudgetAvailableRepository {
	mock := &BudgetAvailableRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
