// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "your-accounts-api/shared/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// ILogApp is an autogenerated mock type for the ILogApp type
type ILogApp struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, description, code, resourceId, detail, tx
func (_m *ILogApp) Create(ctx context.Context, description string, code domain.CodeLog, resourceId uint, detail map[string]interface{}, tx persistent.Transaction) error {
	ret := _m.Called(ctx, description, code, resourceId, detail, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CodeLog, uint, map[string]interface{}, persistent.Transaction) error); ok {
		r0 = rf(ctx, description, code, resourceId, detail, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOld provides a mock function with given fields: ctx
func (_m *ILogApp) DeleteOld(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOld")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrphan provides a mock function with given fields: ctx
func (_m *ILogApp) DeleteOrphan(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrphan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByProject provides a mock function with given fields: ctx, code, resourceId
func (_m *ILogApp) FindByProject(ctx context.Context, code domain.CodeLog, resourceId uint) ([]domain.Log, error) {
	ret := _m.Called(ctx, code, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for FindByProject")
	}

	var r0 []domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CodeLog, uint) ([]domain.Log, error)); ok {
		return rf(ctx, code, resourceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.CodeLog, uint) []domain.Log); ok {
		r0 = rf(ctx, code, resourceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.CodeLog, uint) error); ok {
		r1 = rf(ctx, code, resourceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILogApp creates a new instance of ILogApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogApp {
	mock := &ILogApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
