// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "your-accounts-api/shared/domain"

	mock "github.com/stretchr/testify/mock"

	persistent "your-accounts-api/shared/domain/persistent"
)

// LogRepository is an autogenerated mock type for the LogRepository type
type LogRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *LogRepository) Save(ctx context.Context, _a1 domain.Log) (uint, error) {
	ret := _m.Called(ctx, _a1)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) (uint, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) uint); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Log) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAllByExample provides a mock function with given fields: ctx, example
func (_m *LogRepository) SearchAllByExample(ctx context.Context, example domain.Log) ([]*domain.Log, error) {
	ret := _m.Called(ctx, example)

	var r0 []*domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) ([]*domain.Log, error)); ok {
		return rf(ctx, example)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Log) []*domain.Log); ok {
		r0 = rf(ctx, example)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Log) error); ok {
		r1 = rf(ctx, example)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: tx
func (_m *LogRepository) WithTransaction(tx persistent.Transaction) domain.LogRepository {
	ret := _m.Called(tx)

	var r0 domain.LogRepository
	if rf, ok := ret.Get(0).(func(persistent.Transaction) domain.LogRepository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.LogRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewLogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogRepository creates a new instance of LogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogRepository(t mockConstructorTestingTNewLogRepository) *LogRepository {
	mock := &LogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
